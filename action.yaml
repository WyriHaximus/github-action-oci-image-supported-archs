name: 'OCI Image Supported Platforms'
description: 'Get the OCI Platforms for a given OCI Image or Dockerfile'
branding:
  icon: 'cpu'
  color: 'blue'
inputs:
  dockerfile:
    description: The Dockerfile to get its supported platforms, support patterns that work in both git's sparse checkout and bash. (The pattern needs to work in both.)
    required: false
    default: 'Dockerfile'
  image:
    description: The OCI image to get its supported platforms, optionally a comma seperated list of images can be supplied and the intersection of the supported platforms will be the output
    required: false
    default: ''
outputs:
  platform:
    description: The upstream supported platforms as JSON array
    value: ${{ steps.platform.outputs.platform }}
  platform_csv:
    description: The upstream supported platforms as CSV
    value: ${{ steps.platform_csv.outputs.platform_csv }}
runs:
  using: "composite"
  steps:
    - name: Checkout ðŸ›’
      if: inputs.image == ''
      uses: actions/checkout@v4
      with:
        path: .wyrihaximus-oci-image-platforms
        sparse-checkout-cone-mode: false
        sparse-checkout: |
          ${{ inputs.dockerfile }}
    - name: Get FROM lines
      id: from
      if: inputs.image == ''
      shell: bash
      run: |
        printf "from=%s" $(cat .wyrihaximus-oci-image-platforms/${{ inputs.dockerfile }} | grep FROM | xargs -I % docker run -q -i --rm ghcr.io/wyrihaximusnet/php:8.3-nts-alpine-slim php -r 'echo explode(" ", trim("%"))[1], ",";' | head -c -1) >> $GITHUB_OUTPUT
    - name: Image ðŸ§™
      id: image
      shell: bash
      run: |
        if [ "${{ inputs.image }}" == "" ] ; then
          printf "image=%s" $(echo "${{ steps.from.outputs.from }}" | tr '[:upper:]' '[:lower:]') >> $GITHUB_OUTPUT
        else
          printf "image=%s" $(echo "${{ inputs.image }}" | tr '[:upper:]' '[:lower:]') >> $GITHUB_OUTPUT
        fi
    - name: Get Platforms from Manifest
      id: platform
      shell: bash
      run: |
        getPlatformsForImage () {
          docker manifest inspect $1 | docker run --rm -i -q ghcr.io/jqlang/jq:1.7.1 '([.manifests[].platform | select(.os != "unknown")]?) | .[] | (.os + "/" + .architecture)' | docker run --rm -i -q ghcr.io/jqlang/jq:1.7.1 -s -c '.'
        }
        getPlatformsIntersected () {
          echo $1 | docker run -q -i --rm ghcr.io/wyrihaximusnet/php:8.3-nts-alpine-slim php -r 'echo json_encode(array_intersect(...array_values(json_decode(trim(fgets(STDIN)), true))), JSON_UNESCAPED_SLASHES);'
        }
        getDeduplicatedPlatforms () {
          echo $1 | docker run -q -i --rm ghcr.io/wyrihaximusnet/php:8.3-nts-alpine-slim php -r 'echo json_encode(array_values(array_unique(array_values(json_decode(trim(fgets(STDIN)), true)))), JSON_UNESCAPED_SLASHES);'
        }
        export -f getPlatformsForImage
        if [[ "${{ steps.image.outputs.image }}" == *","* ]]; then
          printf "platform=%s" $(getDeduplicatedPlatforms $(getPlatformsIntersected $(echo "${{ steps.image.outputs.image }}" | tr ',' '\n'| xargs -I % bash -c 'getPlatformsForImage "%"' | docker run --rm -i -q ghcr.io/jqlang/jq:1.7.1 -s -c '.'))) >> $GITHUB_OUTPUT
        else
          printf "platform=%s" $(getDeduplicatedPlatforms $(getPlatformsForImage ${{ steps.image.outputs.image }})) >> $GITHUB_OUTPUT
        fi

    - name: Create CSV from JSON
      id: platform_csv
      shell: bash
      run: |
        printf "platform_csv=%s" $(echo "${{ steps.platform.outputs.platform }}"  | docker run -q -i --rm ghcr.io/wyrihaximusnet/php:8.3-nts-alpine-slim php -r 'echo str_replace(["[", "\"", "]"], "", trim(fgets(STDIN)));') >> $GITHUB_OUTPUT
